<?php

  class Router {
  	private $routes; /* массив в котором будут хранится маршруты */

  	/* в конструкторе мы прочитаем и запомним роуты */
  	public function __construct () {
  		$routesPath = ROOT.'/config/routes.php'; /* путь к файлу с роутами */
  		$this->routes = include($routesPath); /* переменной routes присваиваем массив роутов, который возвращается из файла routes.php */
  	}

  	/* проявили инкапсуляцию, объявили класс приватным, тк будем обращаться к нему только внутри нашего класса */
  	private function getURI () {
  		if (!empty($_SERVER['REQUEST_URI'])) {
  			return trim($_SERVER['REQUEST_URI'],'/');
  		}
  	}

  	/* будет принимать управление от FRONT Controller */
  	/* отвечает за обработку запроса и передачу управления */
  	public function run () {
  		// получить строку запроса
  		$uri = $this->getURI();
      
      $cnt_routes=0; // Количество роутов которые пройдёт цикл foreach
      $cnt_matches=0; // Количество совпадений между введённым в адресную строку и роутами из файла
      $routes_in_file=count($this->routes); // Количество роутов которые прописаны в файле routes.php


  		// проверить наличие такого запроса в routes.php
  		// $this->routes - хранит роуты из файла
  		// $uri - хранит роут который ввёл пользователь
  		foreach ($this->routes as $uriPattern => $path) {
      $cnt_routes++;
      // --------------------- 404 Page generate ---------------------------------------
      // Если пользователь в адресную строку ввел ещё какое-то название кроме названия сайта то $uri!='' т.е. содержит символы
        // Если не было найдено совадений между введённым адресом и роутами в файле
          // Если мы прошли по всем роутам из файла кроме последнего ($routes_in_file-1) и не нашли
          // совпадений то пользователь ввёл неправильное название страницы, кроме последнего, т.к.
          // в последнем роуте хранится само название сайта и мы его не рассматриваем
          // ТОГДА генерирует ошибку 404 - запрашиваемая страница не найдена
      if (($cnt_routes==$routes_in_file-1) && ($cnt_matches==0) && ($uri!="")) {
        echo "<br> <center> <font size=3> 404 Not Found </font> <br><br> <a href='/'> Go to Main >> </a> </center>";
        break;
      }
      // --------------------- 404 Page generate ---------------------------------------

  			// если в роутах нет такого пути как ввели в адресную строку
  			// то запрос Не выполнится, а если условие соблюдается, то в переменной path 
  			// будет имя Контроллера и Экшена для обработки этого запроса

  			// в регулярном выражении использовали - Тильды в качестве разделителей
  			// т.к. в адресе могут содержаться слеши, а разделителями могут быть любые символы
  			if (preg_match("~$uriPattern~", $uri)) {
        $cnt_matches++;
  				// получаем внутренний путь из внешнего согласно правилу
          // подставляем в $path данные вместо регулярного выражения из $uri и меняем значение переменной uri на path
          // $internalRoute = контроллер/экшн/параметры (данные подставленные вместо регулярного выражения)
  				$internalRoute = preg_replace("~$uriPattern~", $path, $uri);
          
          // Определить контроллер, экшен, параметры
          // Функция explode превращает строку в массив слов (грубо)
  				$segments = explode('/', $internalRoute); // $segmets - это массив, где [0]-Controller & [1]-Action
  				
  				$controllerName = array_shift($segments).'Controller';
  				$controllerName = ucfirst($controllerName); /* $controllerName - это класс */

  				$actionName = 'action'.ucfirst(array_shift($segments)); /* $actionName - это метод класса который выше (controllerName) */

           /* оставшиеся данные в адресной строке после выделения из неё Контроллера и Экшена, 
           это параметры для этого Экшена, которые остались в массиве $segments */
  				 $parameters = $segments;
  				 
  				// подключаем файл класса контроллера
  				$controllerFile = ROOT.'/controllers/'.$controllerName.'.php';
  				if (file_exists($controllerFile)) {
  					include_once($controllerFile);
  				}

  				// создать объект класса контроллера, вызвать метод (т.е. action)
  				$controllerObject = new $controllerName; // вместо имени класса подставляем переменную controllerName в которой именя класса
  				
          $result = $controllerObject->$actionName($parameters); // вместо имени метода подставляем строку которая содержит имя нужного метода
  				if ($result != null) { break; } // если метод сработал, то обрываем цикл, который ищет совпадения в маршрутах
  			} 

  		}

  	}

  }

?>